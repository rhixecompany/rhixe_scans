generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String    @default("NO_NAME")
  email         String    @unique(map: "user_email_idx")
  emailVerified DateTime? @db.Timestamp(6)
  image         String?
  password      String?
  role          String    @default("user")
  createdAt     DateTime  @default(now()) @db.Timestamp(6)
  updatedAt     DateTime  @updatedAt
  account       Account[]
  comics        Comic[]
  session       Session[]
}

model Account {
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now()) @db.Timestamp(6)
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @id
  userId       String   @db.Uuid
  expires      DateTime @db.Timestamp(6)
  createdAt    DateTime @default(now()) @db.Timestamp(6)
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Genre {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name    String  @unique(map: "zgenre_name_idx")
  comicId String? @db.Uuid
  Comic   Comic?  @relation(fields: [comicId], references: [id])
}

model Category {
  id    String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String  @unique(map: "zcategory_name_idx")
  Comic Comic[]
}

model Author {
  id    String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String  @unique(map: "zauthor_name_idx")
  Comic Comic[]
}

model Artist {
  id    String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name  String  @unique(map: "zartist_name_idx")
  Comic Comic[]
}

model ComicImage {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  link      String
  image     String?
  status    String?
  checksum  String?
  comicId   String?  @db.Uuid
  chapterId String?  @db.Uuid
  Chapter   Chapter? @relation(fields: [chapterId], references: [id])
  Comic     Comic?   @relation(fields: [comicId], references: [id])
}

model Comic {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title         String       @unique(map: "zcomic_title_idx")
  slug          String       @unique(map: "zcomic_slug_idx")
  description   String
  status        String
  rating        Decimal      @default(0) @db.Decimal(10, 1)
  created_at    DateTime     @default(now()) @db.Timestamp(6)
  updated_at    DateTime     @updatedAt
  link          String
  serialization String?
  numchapters   Int          @default(0)
  numimages     Int          @default(0)
  has_chapters  Boolean      @default(false)
  has_images    Boolean      @default(false)
  categoryId    String       @db.Uuid
  authorId      String       @db.Uuid
  artistId      String       @db.Uuid
  userId        String?      @db.Uuid
  Chapter       Chapter[]
  artist        Artist       @relation(fields: [artistId], references: [id], onDelete: Cascade)
  author        Author       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category      Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  User          User?        @relation(fields: [userId], references: [id])
  images        ComicImage[]
  genres        Genre[]
}

model ChapterImage {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  link      String
  image     String?
  status    String?
  checksum  String?
  chapterId String?  @db.Uuid
  Chapter   Chapter? @relation(fields: [chapterId], references: [id])
}

model Chapter {
  id         String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name       String
  slug       String         @unique(map: "zchapter_slug_idx")
  title      String?
  created_at DateTime       @default(now()) @db.Timestamp(6)
  updated_at DateTime       @updatedAt
  link       String
  numimages  Int            @default(0)
  has_images Boolean        @default(false)
  comicId    String         @db.Uuid
  comic      Comic          @relation(fields: [comicId], references: [id], onDelete: Cascade)
  images     ChapterImage[]
  ComicImage ComicImage[]
}
